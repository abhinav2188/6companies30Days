/*
question : https://practice.geeksforgeeks.org/problems/prerequisite-tasks/1/
submission :
https://practice.geeksforgeeks.org/viewSol.php?subId=ba6856a875e405405051c67a9580214e&pid=702128&user=iil0nty02p8sq5leaeaek3zwro7xll9wbfhxfapk
*/

//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
	public static void main(String args[]) throws IOException
	{
	    Scanner sc = new Scanner(System.in);
	    int t = sc.nextInt();
		while(t>0)
		{
		    int N = sc.nextInt();
		    int P = sc.nextInt();
		    int prerequisites[][] = new int[P][2];
		    for(int i=0;i<P;i++)
		    {
		        for(int j=0;j<2;j++)
		        {
		            prerequisites[i][j] = sc.nextInt();
		        }
		    }
			Solution ob = new Solution();
			if(ob.isPossible(N,prerequisites))
			{
			    System.out.println("Yes");
			}
			else{
			    System.out.println("No");
			}
			t--;
		}
	}

}
// } Driver Code Ends


// TC ~ O(N+P)
// SC ~ O(N+P)

class Solution {
    public boolean isPossible(int N, int[][] prerequisites)
    {
        int state[] = new int[N];
        // 0 ~ not visited
        // 1 ~ visited but not complete
        // 2 ~ completed


        List<Integer> dependency[] = new List[N];
        for(int i=0;i<N;i++)
            dependency[i] = new ArrayList<Integer>();

        // O(P)
        for(int p[] : prerequisites){
            dependency[p[0]].add(p[1]);
        }

        // System.out.println(Arrays.toString(dependency));

        // O(N+P)
        boolean ans = true;
        for(int i=0;i<N;i++){
            if(state[i] == 0){
                ans = ans && resolveDependency(i,dependency,state);
            }
        }
        return ans;

    }

    public boolean resolveDependency(int idx, List<Integer> dependency[], int state[]){
        boolean ans = true;
        state[idx] = 1;
        for(int d : dependency[idx]){
            if(state[d] == 0)
            ans = ans && resolveDependency(d,dependency,state);
            else if(state[d] == 1) return false;
        }
        // System.out.print(idx+"->");
        state[idx] = 2;
        return ans;
    }

}