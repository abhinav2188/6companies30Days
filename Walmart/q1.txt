/*
question : https://leetcode.com/problems/path-with-maximum-probability/
submission : https://leetcode.com/submissions/detail/630184023/
*/

// TC ~ O(E + ElogE)
// SC ~ O(E)

class Solution {

    class Pair{
        int vertex;
        double probability;
        public Pair(int v, double p){
            vertex = v;
            probability = p;
        }
        public String toString(){
            return "["+vertex+","+probability+"]";
        }
    }

    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {

        List<Pair> adjList[] = findAdjList(n,edges,succProb);

        PriorityQueue<Pair> maxHeap = new PriorityQueue<>((p1,p2) -> {
            double d = p2.probability - p1.probability;
            if(d > 0) return 1;
            else if(d < 0) return -1;
            else return 0;
        });

        boolean visited[] = new boolean[n];

        maxHeap.add(new Pair(start,1));

        while(maxHeap.size() > 0){
            Pair p = maxHeap.poll();
            if(visited[p.vertex]) continue;
            if(p.vertex == end) return p.probability;
            visited[p.vertex] = true;
            for(Pair adj : adjList[p.vertex]){
                if(!visited[adj.vertex]){
                    double prob = p.probability * adj.probability;
                    maxHeap.add(new Pair(adj.vertex, prob));
                }
            }
        }

        return 0;

    }


    private List<Pair>[] findAdjList(int n, int edges[][], double prob[]){

        List<Pair> adjList[] = new List[n];

        for(int i=0;i<n;i++)
            adjList[i] = new ArrayList<>();

        for(int i=0;i<edges.length; i++){
            int edge[] = edges[i];
            adjList[edge[0]].add(new Pair(edge[1],prob[i]));
            adjList[edge[1]].add(new Pair(edge[0],prob[i]));
        }

        return adjList;

    }
}