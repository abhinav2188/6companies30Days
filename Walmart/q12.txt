/*
question : https://leetcode.com/problems/find-array-given-subset-sums/
submission : https://leetcode.com/submissions/detail/630984501/
*/

// TC ~ O(nlogn*logn)
// SC ~ O(n)

class Solution {

    public int[] recoverArray(int n, int[] sums) {
        Arrays.sort(sums);
        int arr[] = new int[n];
        recoverArrayUtil(sums,arr,0);
        return arr;
    }

    private boolean recoverArrayUtil(int sums[], int arr[], int idx){
        // System.out.println("util("+Arrays.toString(sums)+","+Arrays.toString(arr)+")");
        int m = sums.length;
        if(m==2){
            if(sums[0] == 0){
                arr[idx] = sums[1];
                return true;
            }
            if(sums[1] == 0){
                arr[idx] = sums[0];
                return true;
            }
            return false;
        }

        boolean ans = true;

        int max1 = sums[m-1];
        int max2 = sums[m-2];

        // if max2 is -ve el can't be positive
        if(max2>=0){
            // el is positive
            int newSums[] = new int[m/2];
            boolean taken[] = new boolean[m];

            int el = max1 - max2;
            int j = m-1;

            for(int i=m/2-1; i>=0; i--){
                // find max number that is not taken
                while(taken[j]) j--;
                taken[j] = true;
                // System.out.print("j="+j);
                // find number corresponding to chosen max number
                int k = findNum(sums,taken,0,j-1,sums[j]-el);
                if(k==-1){
                    ans = false;
                    break;
                }
                newSums[i] = sums[k];
                taken[k] = true;
                // for(boolean b:taken)
                //     System.out.print(b?"1,":"0,");
                // System.out.println();
            }

            arr[idx] = el;

            if(ans) {
                ans = ans && recoverArrayUtil(newSums,arr,idx+1);
            }
            if(ans) return true;

        }


        // if minimum is +ve, el can't be negative
        if(sums[0] < 0){

            // el is negative
            int newSums[] = new int[m/2];
            boolean taken[] = new boolean[m];

            int el = max2 - max1;
            int j=0;

            for(int i=0; i<m/2; i++){
                // find min number that is not taken
                while(taken[j]) j++;
                taken[j] = true;
                // System.out.println("j=");
                // find number corresponding to the min chosen number
                int k = findNum(sums,taken,j+1,m-1,sums[j]-el);
                if(k==-1) {
                    return false;
                }
                newSums[i] = sums[k];
                taken[k] = true;
            }

            arr[idx] = el;
            return recoverArrayUtil(newSums,arr,idx+1);
        }

        return false;

    }


    private int findNum(int sums[], boolean taken[],int start, int end, int target){
        // return first occurence that is not taken

        // System.out.print("find("+start+","+end+","+target+")=");

        int candidate = -1;
        while(start<=end){
            int mid = start + (end-start)/2;
            if(sums[mid] == target){
                if(taken[mid]){
                    start = mid + 1;
                }
                else{
                    candidate = mid;
                    end = mid-1;
                }
            }
            else if(target > sums[mid]){
                start = mid+1;
            }
            else
                end = mid-1;
        }
        // System.out.println(candidate);
        return candidate;
    }
}

/*
1. find a element that belongs to array
2. divide the array into 2
3. repeat the first two steps

cases:
all elements are positive (take element next to 0)
all elements are negative (take element prev to 0 i.e. max other than 0)
contains both (take el as max1 - max2)

max1 will be sum of all +ve
max2 can be sum of +ves but not all
max2 can be sum of all +ves and a negative (min)

[0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]
max1 = 9
max2 = 9
el = 0
9 8 5 4 4 3 -1 0
9 8 5 4 4 3 -1 0
max1 = 9
max2 = 8
el = 1
9 8 5 4 4 3 -1 0

[8 4 3 -1]
el = 8-4 = 4
4 -1
el = 5

*/

/*
case1: all positive
[1,2,10] => all subset sums will be +ve
0,1,2,3,10,11,12,13

only subarray sub with len > 1
map{[3,1],[4,1],[5,1]}
[0,1,2,3]
0,0,1,1,2,2,3,3,3,4,5,
first 0 skip
[0,1,2,3]

[-1,-2,-3]
0,-1,-2,-3,-3,-4,-5,-6

-4,-3,-2

0,-4,-3,-7,-2,-6,-5,-9
-9,-7,-6,-5,-4,-3,-2,0


[-2,-1,1]
0,-2,-1,-3,1,-1,0,-2

-3,-2,-2,-1,-1,0,0,1

[-3,-2,-1,0,0,1,2,3]

el1 = 3-2 = 1

arr = [-3

-3,1,2
-3,-2,-1,0,1,2,3

1,2,-1,-3

0,1,2,3,-1,0,1,2,-3,-2,-1,0,-4,-3,-2,-1




*/