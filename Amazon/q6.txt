/*
question : 
https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1#
submission : 
https://practice.geeksforgeeks.org/viewSol.php?subId=a713842c05c2851588465e4e9861ddb7&pid=701349&user=iil0nty02p8sq5leaeaek3zwro7xll9wbfhxfapk
*/

//Initial template for JAVA

import java.util.*;
import java.io.*;
import java.lang.*;

class Main
{
    public static void main(String args[])
    {
        //taking input using class Scanner
        Scanner sc = new Scanner(System.in);
        
        //taking total count of testcases
        int t = sc.nextInt();
        
        
        
        while(t-- > 0)
        {
            //taking total number of elements
            int n = sc.nextInt();
            
            //taking size of subArrays 
            int k = sc.nextInt();
            
            //Declaring and Intializing an array of size n
            int arr[] = new int[n];
            
            //adding all the elements to the array 
            for(int i = 0; i <n; i++)
            {
                arr[i] =sc.nextInt();
            }
            
            //Calling the method max_of_subarrays of class solve
            //and storing the result in an ArrayList
            ArrayList <Integer> res = new Solution().max_of_subarrays(arr, n, k);
            
            //printing the elements of the ArrayList
            for (int i = 0; i < res.size(); i++)
                System.out.print (res.get (i) + " ");
            System.out.println();
        }
    }
}// } Driver Code Ends


//User function template for JAVA

class Solution
{
    //Function to find maximum of each subarray of size k.
    static ArrayList<Integer> max_of_subarrays(int arr[], int n, int k)
    {
        ArrayDeque<Integer> queue = new ArrayDeque<>();
        ArrayList<Integer> ans = new ArrayList<>();
        
        if(k==1){
            for(int a:arr) ans.add(a);
            return ans;
        }
        
        for(int i=0;i<n;i++){
            // System.out.println("i="+i);
            while(!queue.isEmpty()){
                int idx = queue.peekFirst();
                if(idx<=i-k) queue.pollFirst();
                else break;
            }
            while(!queue.isEmpty()){
                int idx = queue.peekLast();
                if(arr[idx] <= arr[i]) queue.pollLast();
                else break;
            }
            queue.offerLast(i);
            // System.out.println(queue);
            if(i>=k-1){
                ans.add(arr[queue.peekFirst()]);
            }
        }
        
        return ans;
    }
}