/*
question :
https://practice.geeksforgeeks.org/problems/phone-directory4628/1/#
submission : 
https://practice.geeksforgeeks.org/viewSol.php?subId=cdffe21525975dc77613dcd56c7df580&pid=705602&user=iil0nty02p8sq5leaeaek3zwro7xll9wbfhxfapk
*/

//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int n = Integer.parseInt(in.readLine());
            String contact[] = in.readLine().trim().split("\\s+");
            String s = in.readLine();
            
            Solution ob = new Solution();
            ArrayList<ArrayList<String>> ans = ob.displayContacts(n, contact, s);
            for(int i = 0;i < ans.size();i++){
                for(int j = 0;j < ans.get(i).size();j++)
                    System.out.print(ans.get(i).get(j) + " ");
                System.out.println();
            }
        }
    }
}// } Driver Code Ends


//User function Template for Java

class TrieNode{
    Map<Character,TrieNode> map;
    List<Integer> indices;
    TrieNode(){
        map = new HashMap<>();
        indices = new ArrayList<>();
    }
    public String toString(){
        return "{ keys: "+map.keySet()+" ,indices: "+indices+"}";
    }
}

class Trie{
    TrieNode root;
    public Trie(){
        root = new TrieNode();
    }
    void add(int id,String str){
        TrieNode curr = root;
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            if(!curr.map.containsKey(ch)){
                curr.map.put(ch,new TrieNode());
            }
            curr = curr.map.get(ch);
            curr.indices.add(id);
        }
    }
    public void print(){
        ArrayDeque<TrieNode> queue = new ArrayDeque<>();
        queue.offer(root);
        while(queue.size() > 0){
            int k = queue.size();
            for(int i=0;i<k;i++){
                TrieNode node = queue.pollFirst();
                System.out.println(node);
                queue.addAll(node.map.values());
            }
            System.out.println("---------------------");
        }
    }
}

class Solution{
    static ArrayList<ArrayList<String>> displayContacts(int n, 
                                        String contact[], String s)
    {
        // nlogn
        Set<String> set = new HashSet<>();
        for(String c : contact) set.add(c);
        
        String contact2[] = new String[set.size()];
        int k=0;
        for(String c : set){
            contact2[k++] = c;
        }
        Arrays.sort(contact2);
        Trie trie = new Trie();
        
        // n*|contact[i]|
        for(int i=0;i<contact2.length;i++){
            trie.add(i,contact2[i]);
        }
        // trie.print();
        
        ArrayList<ArrayList<String>> ans = new ArrayList<>();
        
        TrieNode curr = trie.root;
        
        int i;
        
        // |s|*|n|
        for(i=0;i<s.length();i++){
            char ch = s.charAt(i);
            if(curr.map.containsKey(ch)){
                curr = curr.map.get(ch);
                ArrayList<String> list = new ArrayList<>();
                for(int idx : curr.indices){
                    list.add(contact2[idx]);
                }
                ans.add(list);
            }
            else{
                break;
            }
        }
        
        while(i<s.length()){
            ans.add(new ArrayList<>(Arrays.asList("0")));
            i++;            
        }
        
        return ans;
    }
}