/*
question link : 
https://practice.geeksforgeeks.org/problems/maximum-profit4657/1#
submission link : 
https://practice.geeksforgeeks.org/viewSol.php?subId=445f2c65d89ba78f799c9f8c62150506&pid=704532&user=iil0nty02p8sq5leaeaek3zwro7xll9wbfhxfapk
*/

// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader in =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while (t-- > 0) {
            int K = Integer.parseInt(in.readLine());
            int N = Integer.parseInt(in.readLine());
            String input_line[] = in.readLine().trim().split("\\s+");
            int A[] = new int[N];
            for (int i = 0; i < N; i++) A[i] = Integer.parseInt(input_line[i]);

            Solution ob = new Solution();
            System.out.println(ob.maxProfit(K, N, A));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// TC ~ O(n*k)
// SC ~ O(n)

class Solution {
    static int maxProfit(int K, int N, int A[]) {
        if(N==1) return 0;
        int profitCurr[] = new int[N];

        // for number of transactions = 1;
        int min = A[0];
        for(int j=1;j<N;j++){
            min = Math.min(min,A[j]);
            profitCurr[j] = Math.max(profitCurr[j-1],A[j]-min);
        }
        
        for(int i=1;i<K;i++){
            // i+1 is the max number of transactions
            int profitNext[] = new int[N];
            // keeps track of the maxProfit that can be gained by buying at 
            // any of the previous days
            int maxPrevProfit = -A[0];
            for(int j=1;j<N;j++){
                profitNext[j] = Math.max(A[j]+maxPrevProfit,Math.max(profitCurr[j],profitNext[j-1]));
                maxPrevProfit = Math.max(maxPrevProfit,profitCurr[j-1]-A[j]);
            }
            profitCurr = profitNext;
        }
        
        return profitCurr[N-1];
    }
}

// transactions

//     10 22 5 75 65  80
// 1   0  12 12 70 70 75
//       -10 7  7  7 
// 2   0  12 12 82 82 87  