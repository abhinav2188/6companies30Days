/*
question : https://practice.geeksforgeeks.org/problems/minimum-insertions-to-make-two-arrays-equal/1/
submission :
https://practice.geeksforgeeks.org/viewSol.php?subId=3175d011c14dfec8d453c05c7372ef6c&pid=706334&user=mosshead
*/

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S[] = read.readLine().split(" ");

            int N = Integer.parseInt(S[0]);
            int M = Integer.parseInt(S[1]);

            int[] A = new int[N];
            int[] B = new int[M];

            String S1[] = read.readLine().split(" ");
            String S2[] = read.readLine().split(" ");

            for(int i=0; i<N; i++)
                A[i] = Integer.parseInt(S1[i]);

            for(int i=0; i<M; i++)
                B[i] = Integer.parseInt(S2[i]);

            Solution ob = new Solution();
            System.out.println(ob.minInsAndDel(A,B,N,M));
        }
    }
}// } Driver Code Ends


// TC ~ O(m)+ O(n*logm)
// SC ~ O(m)

class Solution {
    static int minInsAndDel(int[] A, int[] B, int N, int M) {
        // find longest increasing sequence in A, that is in B

        Set<Integer> set = new HashSet<>();
        for(int b : B) set.add(b);

        ArrayList<Integer> incSub = new ArrayList<>();
        for(int i=0;i<N;i++){
            int num = A[i];
            if(!set.contains(num)) continue;
            int j = findCeilIndex(incSub,num);
            if(j==incSub.size()){
                incSub.add(num);
            }
            else{
                incSub.set(j,num);
            }
        }

        // System.out.println(incSub);

        int operations = 0;
        // delete operations
        operations += (N-incSub.size());
        // insert operations
        operations += (M-incSub.size());

        return operations;
    }

    private static int findCeilIndex(ArrayList<Integer> nums, int target){
        if(nums.size() == 0) return 0;
        if(nums.get(nums.size()-1) < target) return nums.size();

        int start = 0;
        int end = nums.size()-1;
        int candidate = -1;

        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums.get(mid) >= target){
                candidate = mid;
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }

        return candidate;
    }

};

/*

13 5
1 5 6 18 1 7 19 2 5 7 28 11 23
1 5 7 18 23

1 3 5
0 1 2

1 2 5 3 1
0 _ 2 1 0

1 5 7 18 23
0 1 2 3. 4

1 5 6 18 1 7 19 2 5 7 28 11 23
0 1 _ 3  0 2 _. _ 1 2. _ _  4

1 2 3 4
1 5 7 23

13-4 = 9 delete + 5-4 = 1 insertion

*/