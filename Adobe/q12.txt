/*
question : https://practice.geeksforgeeks.org/problems/leaders-in-an-array-1587115620/1/#
submission :
https://practice.geeksforgeeks.org/viewSol.php?subId=51039b9a11a19af4f94cd4acedae75b9&pid=701210&user=mosshead
*/

import java.io.*;
import java.util.*;

class Array {

	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases

		while(t-->0){

		    //input size of array
		    int n = Integer.parseInt(br.readLine().trim());
		    int arr[] = new int[n];
		    String inputLine[] = br.readLine().trim().split(" ");

		    //inserting elements in the array
		    for(int i=0; i<n; i++){
		        arr[i] = Integer.parseInt(inputLine[i]);
		    }

		    Solution obj = new Solution();

		    StringBuffer str = new StringBuffer();
		    ArrayList<Integer> res = new ArrayList<Integer>();

		    //calling leaders() function
		    res = obj.leaders(arr, n);

		    //appending result to a String
		    for(int i=0; i<res.size(); i++){
		        str.append(res.get(i)+" ");
		    }

		    //printing the String
		    System.out.println(str);
		}

	}
}
// } Driver Code Ends


class Solution{
    //Function to find the leaders in the array.
    static ArrayList<Integer> leaders(int arr[], int n){
        ArrayList<Integer> leads = new ArrayList<>();
        int maxR = arr[n-1];
        leads.add(arr[n-1]);

        for(int i=n-2; i>=0; i--){
            if(maxR <= arr[i])
            leads.add(arr[i]);
            maxR = Math.max(maxR,arr[i]);
        }

        Collections.reverse(leads);
        return leads;
    }

}
