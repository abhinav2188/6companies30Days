/*
question : https://leetcode.com/problems/course-schedule-ii/
submission : https://leetcode.com/submissions/detail/630105573/
*/


// topological sort
// TC ~ O(preq) + O(n+p)
// SC ~ O(n^2) + O(n)

class Solution {

    int taskStatus[];

    public int[] findOrder(int numCourses, int[][] prerequisites) {

        ArrayDeque<Integer> queue = new ArrayDeque<>();

        List<List<Integer>> denpendencies = getDenpendencyList(prerequisites,numCourses);

        taskStatus = new int[numCourses];
        // 0 ~ not started, 1 ~ ongoing, 2 ~ completed

        boolean finishable = true;
        for(int i=0; i<numCourses; i++){
            if(taskStatus[i] == 0)
                finishable = finishable && topologicalSort(denpendencies,i,queue);
        }

        if(!finishable) return new int[0];

        int order[] = new int[numCourses];
        int i=0;
        while(queue.size() > 0){
            order[i++] = queue.pollFirst();
        }

        return order;

    }

    private List<List<Integer>> getDenpendencyList(int matrix[][], int n){
        List<List<Integer>> dep = new ArrayList<>();
        for(int i=0;i<n;i++){
            dep.add(new ArrayList<>());
        }
        for(int a[] : matrix){
            dep.get(a[0]).add(a[1]);
        }
        return dep;
    }

    private boolean topologicalSort(List<List<Integer>> dependencies, int i, ArrayDeque<Integer> queue){
        if(taskStatus[i] == 1) return false;
        if(taskStatus[i] == 2) return true;
        taskStatus[i] = 1;

        boolean ans = true;
        for(int dep : dependencies.get(i)){
            ans = ans && topologicalSort(dependencies,dep,queue);
        }
        if(!ans) return false;

        queue.offerLast(i);
        taskStatus[i] = 2;

        return true;
    }
}

